#!/usr/bin/env node

var require = require('esm')(module /*, options */);

const { access, constants } = require('fs');
const { promisify } = require('util');
const { join } = require('path');
const { folder, log } = require('@collabo-community/building-blocks');

const { argv, env } = process;
const fs_access = promisify(access);

const rootFolder = './';

const devMode = folder.content.exists({ searchFolder: rootFolder, searchFor: 'dev' });
const prodMode = !devMode;

if (devMode) env.NODE_ENV = 'development';
if (prodMode) env.NODE_ENV = 'production';

let outDirName = '';
if (env.NODE_ENV === 'development') outDirName = 'dist';
if (env.NODE_ENV === 'production') outDirName = 'build';

const outDir = join('./', outDirName);

const collabo_cli = {
    script: {
        start: () => {
            require(`../${outDirName}/src/cli`).cli(argv);
        },
        error: ({ message }) => {
            const outDirExists = folder.content.exists({ searchFolder: rootFolder, searchFor: outDirName });
            if (env.NODE_ENV === 'development') {
                const dynamicErrorDetails = outDirExists ? `Existing '${outDirName}' folder does not have required code to run CLI` : `No '${outDirName}' folder detected - ${message}`;
                log.error(`MEANING: ${dynamicErrorDetails}`);
                const dynamicWarningText = outDirExists ? `correct '${outDirName}' folder content` : `'${outDirName}' folder with required content`;
                log.warning(`â„¹ Follow these steps to generate ${dynamicWarningText}: \n- Open up another terminal, run the 'npm run dev' script command there (keep this new terminal open always)\n- Go back to running the 'collabo-be' command in the previously open terminal, the CLI should now run successfully`);
                // TODO: (if it still crashes after following the help steps above) Report issue
            }
            if (env.NODE_ENV === 'production') {
                const dynamicErrorDetails = outDirExists ? `Cannot run '${outDirName}' folder content` : `'${outDirName}' folder not found`;
                log.error(`MEANING: ${dynamicErrorDetails}`);
                // TODO: Report issue
            }
        },
    },
    run: async ({ success, error }) => {
        try {
            await fs_access(outDir, constants.F_OK);
            success();
        } catch(err) {
            error({ err });
        }
    },
};

collabo_cli.run({
    success: () => {
        collabo_cli.script.start();
    },
    error: ({ err }) => {
        log.error(`\n==========================\n${err}\n==========================\n`);//
        collabo_cli.script.error({ message: err.message });
    }
});
