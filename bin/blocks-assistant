#!/usr/bin/env node

var require = require('esm')(module /*, options */);

const { access, constants } = require('fs');
const { promisify } = require('util');
const { blocks , folder, file, log, prettify, run } = require('@collabo-community/building-blocks');

const { argv, env } = process;
const fs_access = promisify(access);

const collabo_cli = {
    script: {
        start: async () => {
            // let blocksCommand = blocks.command.get();
            let npmLifeCycleEvent = env.npm_lifecycle_event;
            let isBlocksCommand = !npmLifeCycleEvent;
            // console.log({ /*pkgScripts,*/ blocksCommand, isBlocksCommand, script });
            //---------------------------------
            const settings = { cli: { blocks: { command: isBlocksCommand, script: npmLifeCycleEvent } }};
            blocks.cli.config.set({ settings });
            //---------------------------------
        },
        error: ({ message }) => {
            log.error(`${message}`);
        },
    },
    run: async ({ next, error }) => {
        try {
            //
            next();
        } catch(err) {
            error({ err });
        }
    },
};

collabo_cli.run({
    next: () => {
        collabo_cli.script.start();
    },
    error: ({ err }) => {
        collabo_cli.script.error({ message: err.message });
    }
});


// const [rootFolder, devOutputFolder, prodOutputFolder] = ['./', 'dist', 'build'];

// const devMode = config.cli.isDevMode;




// // const prodMode = !devMode;

// let outDirName = devMode ? devOutputFolder : prodOutputFolder;
// // const npmLifeCycleEvent = devMode ? 'cli:dev' : 'cli:prod:build';

// const npmLifeCycleEvent = devMode ? 'cli:dev' : 'cli:prod:build';

// // Once user runs "npm run prod-build" update config isDevMode to false
// // Once a user runs "npm run dev" update config isDevMode to true
// // Also, can we track changes to the dist folder? Maybe we can do this with ts-watch?

// // const isRunningDevScript = npmLifeCycleEvent === 'cli:dev';
// // const isRunningProdScript = npmLifeCycleEvent === 'cli:prod:build';





// const runFromOutputDirectory = async () => {

 
    // await fs_access(outDir, constants.F_OK);
    // require(`../${outDirName}/src/cli`).cli(argv);
// }




// const collabo_cli = {
//     script: {
//         start: () => {
//             require(`../${outDirName}/src/cli`).cli(argv);
//         },
//         error: ({ message }) => {
//             const outDirExists = folder.content.exists({ searchFolder: rootFolder, searchFor: outDirName });
//             if (env.NODE_ENV === 'development') {
//                 const dynamicErrorDetails = outDirExists ? `Existing '${outDirName}' folder does not have required code to run CLI` : `No '${outDirName}' folder detected - ${message}`;
//                 log.error(`MEANING: ${dynamicErrorDetails}`);
//                 const dynamicWarningText = outDirExists ? `correct '${outDirName}' folder content` : `'${outDirName}' folder with required content`;
//                 log.warning(`â„¹ Follow these steps to generate ${dynamicWarningText}: \n- Open up another terminal, run the 'npm run dev' script command there (keep this new terminal open always)\n- Go back to running the 'collabo-be' command in the previously open terminal, the CLI should now run successfully`);
//                 // TODO: (if it still crashes after following the help steps above) Report issue
//             }
//             if (env.NODE_ENV === 'production') {
//                 const dynamicErrorDetails = outDirExists ? `Cannot run '${outDirName}' folder content` : `'${outDirName}' folder not found`;
//                 log.error(`MEANING: ${dynamicErrorDetails}`);
//                 // TODO: Report issue
//             }
//         },
//     },
//     run: async ({ success, error }) => {
//         try {
//             await fs_access(outDir, constants.F_OK);
//             success();
//         } catch(err) {
//             error({ err });
//         }
//     },
// };

// collabo_cli.run({
//     success: () => {
//         collabo_cli.script.start();
//     },
//     error: ({ err }) => {
//         log.error(`\n==========================\n${err}\n==========================\n`);//
//         collabo_cli.script.error({ message: err.message });
//     }
// });


            // Inquirer prompt
            // update or discard changes to config depending on user's choice in prompt! Nice!

